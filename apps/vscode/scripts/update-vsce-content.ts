import { exec } from "node:child_process";
import { writeFile } from "node:fs/promises";
import process from "node:process";
import { promisify } from "node:util";
import { Lang, parse, type SgNode } from "@ast-grep/napi";

const execPromise = promisify(exec);

function getNodeValue(root: SgNode, query: string, value: string): SgNode {
  const node = root.find(query);

  if (node == null) {
    throw new Error(`failed to find node with query: ${query}`);
  }

  const match = node.getMatch(value);

  if (match == null) {
    throw new Error(`failed to find match with value: ${value}`);
  }

  return match;
}

async function run() {
  const res = await fetch("https://raw.githubusercontent.com/microsoft/vscode-vsce/refs/heads/main/src/package.ts");

  if (!res.ok) {
    throw new Error(`failed to fetch file: ${res.statusText}`);
  }

  const text = await res.text();

  const ast = parse(Lang.TypeScript, text);

  const root = ast.root();

  const trustedSvgSourcesNode = getNodeValue(root, "const TrustedSVGSources = $VALUE;", "VALUE");
  const defaultIgnoreNode = getNodeValue(root, "const defaultIgnore = $VALUE;", "VALUE");
  const targetsNode = getNodeValue(root, "const Targets = new Set($VALUE;", "VALUE");

  const sources = JSON.parse(trustedSvgSourcesNode.text().replace(/'/g, "\"").replace(/,(\s*[}\]])/g, "$1").trim());
  const defaultIgnore = JSON.parse(defaultIgnoreNode.text().replace(/'/g, "\"").replace(/,(\s*[}\]])/g, "$1").trim());
  const targets = JSON.parse(targetsNode.text().replace(/'/g, "\"").replace(/,(\s*[}\]])/g, "$1").trim());

  const content = /* ts */`
        // THIS FILE IS AUTO GENERATED BY "./scripts/update-vsce-content.ts"

        export const trustedSources = ${JSON.stringify(sources, null, 2)};

        export const defaultIgnore = ${JSON.stringify(defaultIgnore, null, 2)};

        export const targets = ${JSON.stringify(targets, null, 2)};
    `;

  // write sources to file
  await writeFile("./src/generated-vsce-content.ts", content);

  await execPromise("eslint ./src/generated-vsce-content.ts --fix", {
    cwd: process.cwd(),
  });

  console.log("done");
}

run().catch((err) => {
  console.error(err);
  process.exit(1);
});
